{"version":3,"sources":["lib/market.ts","abbreviate.js","App.js","reportWebVitals.js","index.js"],"names":["computeSwap","offerCoin","askDenom","rates","basePool","minStabilitySpread","delta","baseOfferCoin","_computeInternalSwap","Error","denom","offerPool","askPool","retCoin","cp","Dec","pow","terraPool","add","lunaPool","div","askBaseAmount","sub","plus","amount","baseOfferAmount","spread","lessThan","offerRate","get","askRate","retAmount","times","dividedBy","lessThanOrEqualTo","Coin","annotate","number","maxPlaces","forcePlaces","abbr","rounded","RegExp","test","toFixed","Number","colors","ust_swap_size","App","lcd","useLCDClient","useState","swapRate","setSwapRate","setDelta","isAnimation","setIsAnimation","config","setConfig","data","scale","slippage","useEffect","fetchPools","a","market","poolDelta","oracle","exchangeRates","luna_rates","parameters","base_pool","min_stability_spread","microTerraSide","microLunaSide","terraSide","toNumber","lunaSide","ustSwapRate","min_scale","Math","min","max_scale","max","terraSwapRate","exchangeRate","perfectSwapRate","name","amt","t","setInterval","clearTimeout","Chart","React","memo","BarChart","width","height","Bar","isAnimationActive","onAnimationEnd","label","dataKey","map","entry","index","Cell","fill","LabelList","position","formatter","item","forceLetter","ReferenceLine","isFront","value","y","stroke","YAxis","hide","type","ticks","interval","domain","coin","beforeSpreadFee","afterSpreadFee","minus","className","style","textAlign","marginLeft","marginRight","maxWidth","lineHeight","fontWeight","fontSize","rel","target","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getChainOptions","chainOptions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d16eddfa.chunk.js","sourcesContent":["import { Coin, Coins, Dec } from \"@terra-money/terra.js\"\n\nexport function computeSwap(offerCoin: Coin, askDenom: string, rates: Coins, basePool: Dec, minStabilitySpread: Dec, delta: Dec) {\n\n\t// get offerCoin in sdr base denom\n\tconst baseOfferCoin = _computeInternalSwap(offerCoin, 'usdr', rates);\n\tif (!baseOfferCoin) {\n\t\tthrow new Error(`Invalid base rate (sdr) for ${offerCoin.denom}`);\n\t}\n\n\t// get ask return amount from baseOfferCoin\n\tconst retCoin = _computeInternalSwap(baseOfferCoin, askDenom, rates);\n\n\t// Skips tobin tax logic for terra <> terra swaps\n\n\t// constant-product aka k in k=xy\n\tconst cp = new Dec(basePool.pow(2));\n\n\tconst terraPool = basePool.add(delta);\n\tconst lunaPool = cp.div(terraPool);\n\n\tlet offerPool: Dec, askPool: Dec;\n\n\tif (offerCoin.denom === 'uluna') {\n\t\t// Luna -> Terra swap\n\t\tofferPool = lunaPool\n\t\taskPool = terraPool\n\t} else {\n\t\t// Terra -> Luna swap\n\t\tofferPool = terraPool\n\t\taskPool = lunaPool\n\t}\n\n\t// Get cp(constant-product) based swap amount\n\t// askBaseAmount = askPool - cp / (offerPool + offerBaseAmount)\n\t// askBaseAmount is base denom(usdr) unit\n\tconst askBaseAmount = askPool.sub(cp.div(offerPool.plus(baseOfferCoin.amount)))\n\n\t// Both baseOffer and baseAsk are usdr units, so spread can be calculated by\n\t// spread = (baseOfferAmt - baseAskAmt) / baseOfferAmt\n\tconst baseOfferAmount = baseOfferCoin.amount;\n\tlet spread = baseOfferAmount.sub(askBaseAmount).div(baseOfferAmount)\n\n\tif (spread.lessThan(minStabilitySpread)) {\n\t\tspread = minStabilitySpread;\n\t}\n\n\treturn [retCoin, spread];\n}\n\nexport function coinAfterSpread(coin: Coin, spread: Dec) {\n\tif (!coin) return null;\n\treturn new Coin(coin.denom, coin.amount.minus(coin.amount.times(spread)));\n}\n\nfunction _computeInternalSwap(offerCoin: Coin, askDenom: string, rates: Coins) {\n\tif (offerCoin.denom == askDenom) {\n\t\treturn offerCoin;\n\t}\n\n\t// get rates of offer & ask denoms in uluna.\n\tconst offerRate = rates.get(offerCoin.denom)?.amount;\n\tif (!offerRate) {\n\t\tthrow new Error(\"Invalid offer rate (uluna) for \" + offerCoin.denom);\n\t}\n\tconst askRate = askDenom == \"uluna\" ? new Dec(1) : rates.get(askDenom)?.amount;\n\tif (!askRate) {\n\t\tthrow new Error(\"Invalid ask rate (uluna) for \" + askDenom);\n\t}\n\n\tconst retAmount = offerCoin.amount.times(askRate).dividedBy(offerRate) ?? new Dec(0)\n\n\tif (retAmount.lessThanOrEqualTo(0)) {\n\t\tthrow new Error(\"Invalid return amount\");\n\t}\n\n\treturn new Coin(askDenom, retAmount);\n}","// https://stackoverflow.com/a/18154846\nexport default function abbreviate(number, maxPlaces, forcePlaces, forceLetter) {\n  number = Number(number)\n  forceLetter = forceLetter || false\n  if(forceLetter !== false) {\n    return annotate(number, maxPlaces, forcePlaces, forceLetter)\n  }\n  var abbr\n  if(number >= 1e12) {\n    abbr = 'T'\n  }\n  else if(number >= 1e9) {\n    abbr = 'B'\n  }\n  else if(number >= 1e6) {\n    abbr = 'M'\n  }\n  else if(number >= 1e3) {\n    abbr = 'K'\n  }\n  else {\n    abbr = ''\n  }\n  return annotate(number, maxPlaces, forcePlaces, abbr)\n}\n\nfunction annotate(number, maxPlaces, forcePlaces, abbr) {\n  // set places to false to not round\n  var rounded = 0\n  switch(abbr) {\n    case 'T':\n      rounded = number / 1e12\n      break\n    case 'B':\n      rounded = number / 1e9\n      break\n    case 'M':\n      rounded = number / 1e6\n      break\n    case 'K':\n      rounded = number / 1e3\n      break\n    case '':\n      rounded = number\n      break\n  }\n  if(maxPlaces !== false) {\n    var test = new RegExp('\\\\.\\\\d{' + (maxPlaces + 1) + ',}$')\n    if(test.test(('' + rounded))) {\n      rounded = rounded.toFixed(maxPlaces)\n    }\n  }\n  if(forcePlaces !== false) {\n    rounded = Number(rounded).toFixed(forcePlaces)\n  }\n  return rounded + abbr\n}","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { useLCDClient } from \"@terra-money/wallet-provider\";\nimport { Coin } from \"@terra-money/terra.js\";\nimport React from \"react\";\nimport { BarChart, Bar, Cell, YAxis, ReferenceLine, LabelList } from \"recharts\";\nimport { computeSwap, coinAfterSpread } from \"./lib/market\";\nimport abbreviate from \"./abbreviate\";\n\nconst colors = [\"#0088FE\", \"#FFBB28\"];\nconst ust_swap_size = 100000;\n\nfunction App() {\n  const lcd = useLCDClient();\n  const [swapRate, setSwapRate] = useState([]);\n  const [delta, setDelta] = useState();\n  const [isAnimation, setIsAnimation] = useState(true);\n  const [config, setConfig] = useState([[], [49000000, 51000000], 0]);\n\n  const [data, scale, slippage] = config;\n\n  useEffect(() => {\n    const fetchPools = async () => {\n      const delta = await lcd.market.poolDelta();\n      const luna_rates = await lcd.oracle.exchangeRates();\n      const { base_pool, min_stability_spread } = await lcd.market.parameters();\n      const microTerraSide = base_pool.plus(delta);\n      const microLunaSide = base_pool.pow(2).div(microTerraSide);\n\n      const terraSide = microTerraSide.times(0.000001).toNumber();\n      const lunaSide = microLunaSide.times(0.000001).toNumber();\n\n      setDelta(delta);\n      const ustSwapRate = computeSwap(\n        new Coin(\"uusd\", ust_swap_size * 1e6),\n        \"uluna\",\n        luna_rates,\n        base_pool,\n        min_stability_spread,\n        delta\n      );\n\n      setSwapRate(ustSwapRate);\n\n      let min_scale = Math.min(terraSide, lunaSide) - 1000000;\n      let max_scale = Math.max(terraSide, lunaSide) + 1000000;\n      let scale = [min_scale, max_scale];\n\n      const terraSwapRate = await lcd.market.swapRate(\n        new Coin(\"uusd\", 1000000000),\n        \"uluna\"\n      );\n      const exchangeRate = await lcd.oracle.exchangeRate(\"uusd\");\n      // Expect Luna returned if there was no fee, based on oracle price.\n      const perfectSwapRate = 1000 / exchangeRate.amount.toNumber();\n\n      setConfig([\n        [\n          {\n            name: \"Stablecoins\",\n            amt: terraSide,\n          },\n          {\n            name: \"LUNA\",\n            amt: lunaSide,\n          },\n        ],\n        scale,\n        100 -\n          (terraSwapRate.amount.times(0.000001).toNumber() / perfectSwapRate) *\n            100,\n      ]);\n    };\n\n    fetchPools();\n    const t = setInterval(fetchPools, 7000);\n    return () => {\n      clearTimeout(t);\n    };\n  }, [lcd.market, lcd.oracle]);\n\n  const Chart = React.memo(\n    () => (\n      <BarChart width={800} height={500} data={data}>\n        <Bar\n          isAnimationActive={isAnimation}\n          onAnimationEnd={() => setIsAnimation(false)}\n          label={false}\n          dataKey=\"amt\"\n        >\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={colors[index % 20]} />\n          ))}\n          <LabelList dataKey=\"name\" position=\"top\" fill=\"#000\" />\n          <LabelList\n            formatter={(item) => abbreviate(item, 3, 3, \"M\")}\n            dataKey=\"amt\"\n            position=\"inside\"\n            fill=\"#000000\"\n          />\n        </Bar>\n        <ReferenceLine\n          isFront={false}\n          label={{ position: \"top\", value: \"BasePool (in SDR)\" }}\n          y={50000000}\n          stroke=\"#000\"\n        />\n        <YAxis\n          hide\n          type=\"number\"\n          ticks={10}\n          stroke=\"#000000\"\n          interval={0}\n          domain={scale}\n        />\n      </BarChart>\n    ),\n    [data]\n  );\n\n  if (!swapRate) {\n    return \"Loading...\";\n  }\n\n  const beforeSpreadFee = swapRate[0]?.amount.div(1e6);\n  const afterSpreadFee = coinAfterSpread(swapRate[0], swapRate[1])?.amount.div(\n    1e6\n  );\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        textAlign: \"left\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        maxWidth: 800,\n      }}\n    >\n      <h2 style={{ lineHeight: \"1.2rem\" }}>\n        Relationship between Luna / Terra Stable assets in the Market module\n        <br />\n        <span style={{ fontWeight: \"normal\", fontSize: \"16px\" }}>\n          (live view, updated every block):{\" \"}\n        </span>\n      </h2>\n\n      <Chart />\n      <hr />\n      <div>Current delta: {delta?.div(1e6).toFixed(4)} SDR</div>\n      {beforeSpreadFee && (\n        <div>\n          Oracle Rate: {ust_swap_size} ust = {beforeSpreadFee.toFixed(2)} luna\n          ($\n          {(ust_swap_size / beforeSpreadFee).toFixed(4)} per luna)\n        </div>\n      )}\n\n      {afterSpreadFee && (\n        <div>\n          With {swapRate[1]?.times(100).toFixed(2)} % spread fee:{\" \"}\n          {ust_swap_size} ust = {afterSpreadFee.toFixed(2)} luna ($\n          {(ust_swap_size / afterSpreadFee).toFixed(4)} per luna)\n        </div>\n      )}\n\n      <hr />\n\n      {/* <ul>\n        <li>\n          The Market module enables atomic swaps between different Terra\n          stablecoin denominations and Luna. This module ensures an available,\n          liquid market, stable prices, and fair exchange rates between the\n          protocol’s assets.\n        </li>\n\n        <li>Terra uses a Constant Product market-making algorithm to ensure\n        liquidity for Terra&lt;&gt;Luna swaps.</li>\n        <li>\n          The market starts out with two liquidity pools of equal sizes (BasePool above), one\n          representing all denominations of Terra and another representing Luna.\n        </li>\n        <li>\n          At the end of each block the market module attempts to replenish the\n          pools by decreasing the magnitude of the delta between the Terra and\n          Luna pools.\n        </li>\n        <li>\n          This mechanism ensures liquidity and acts as a low-pass filter,\n          allowing for the spread fee to drop back down when there is a change\n          in demand, causing a necessary change in supply which needs to be\n          absorbed.\n        </li>\n      </ul>\n    \n      <p>\n        <b>\n          This is a very high level overview. Visit the{\" \"}\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            href=\"https://docs.terra.money/docs/develop/module-specifications/spec-market.html\"\n          >\n            \n          </a>{\" \"}\n          on the market module for more information.\n        </b>\n      </p> */}\n      <p>\n        Estimated fee for a 1000 UST to Luna swap based on current pool weights:{\" \"}\n        {slippage.toFixed(2)}% <br />\n        <sub>\n          Pool values above are displayed in{\" \"}\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            href=\"https://docs.terra.money/docs/learn/glossary.html#sdr\"\n          >\n            TerraSDR\n          </a>\n          .\n        </sub>\n      </p>\n      <p>\n        Learn more:{\" \"}\n        <a href=\"https://docs.terra.money/docs/develop/module-specifications/spec-market.html\">\n          Terra docs on the Market module.\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { getChainOptions, WalletProvider } from '@terra-money/wallet-provider'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\ngetChainOptions().then((chainOptions) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <WalletProvider {...chainOptions}>\n        <App />\n      </WalletProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n  )\n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}